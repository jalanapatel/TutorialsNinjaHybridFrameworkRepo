
 we can run project different ways:
 
 1.     by using, testng.xml file   ---> run as TestNG Suite
 2.     by using, maven test    ----> run as Maven test
 3.     by using command line  ---> use 'mvn test' Command
 
 
 To run project  as 'maven test', we must have lombok library in pom.xml, 
 and      apache maven surefire pluging along with Configuration, of  testNG.xml file,  like this    --->  <suiteXmlFile>src/test/resources/Maven_testng.xml</suiteXmlFile>
 and every testclass_Name  must have 'Test' keyword, like Login_Test.java  then only works
 
 Here, run as maven test, invoke pom.xml file, 
 which invoke apache_maven_surefire_pluging, 
 which invoke Maven_testng.xml file,     (testng.xml must have listener_Tag, to capture ScreenShot and create Extent_Report )
 which invoke Classes from testng_File, 
 classes invoke method and all test are executed.
 
 run as maven test ---> pom.xml ---> apache_maven_surefire_plugin  --> testng.xml  ---> classes ---> method  --> All Test executed.
 
 so run as maven test --> maven instruct that only run class which has 'Test'  keyword in ClassName ---> like Login_Test.java  or Login.java
 
 
 testng.xml has connection of listener class.
 
 
 /*  *********************************************************************************************************************************************  */
 
 Jenkins:  
 
 If you have schedule running of your automation scripts at odd timing when you are not available to run script like 02:00 am 
 
 Everyday at 11:0 am you to run automation scripts of Project.
 
 then Jenkins is come into picture 
 
 Jenkin is configure, to perform above jobs by schedule.
 
 Like configure Jenkins in such way that everyday particular scripts is run on specific time or on schedule time.
 
 
 QA FoX Channen i you Tube is best one to learn Jenkins in  Selenium Java Hybrid Framework Project of 12 Hrs,
 TutorialNinjaProject  at 9:00 Hours  Start for Jenkins.
 
 
 Using Jenkins we can schedule our Jobs, and run project as per our schedule.
 
 Jenkin Run  Maven and command  " maven test "
 
 maven test ---> pom.xml ---> apache_maven_surefire_plugin  --> testng.xml  ---> classes ---> method  --> All Test executed.
 

 /*    ******************************************************************************************************************************************* *
 
 Current Project is Working Directory.
 
 Rght-Click on Project --> Select Team ---> Share Project   ---> Create New Repository
 
  .add commnd ----> add code into Staging Area
 
 Team --> Add to Index   ----> Staging    ---> Add Project to Staging Area
 
 Team ---> Commit ---> Local Repository     ---> Commit to Local Repository
 
 Create Remote Repository at GitHub  ---> Copy Repository Git URL  ---> Give the above Copied URL   ----> Provide UserName and Password of GitHub
 
Team ---> Remore  ---> Push ---> Next --> Select Master Branch ---> Add Specification

Finish -----> UserName ---> jalanapatel0301@gmail.com
						Password  ---> Generate token Code in Place of Pasword    ---> https://github.com/settings/tokens
						

Git Repository URL is shared across team.
						
Remote_Repository_URL :https://github.com/jalanapatel/TutorialsNinjaHybridFrameworkRepo.git					

## git Commands: 

git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/jalanapatel/TutorialsNinjaHybridFrameworkRepo.git
git push -u origin main
					
					
						
 